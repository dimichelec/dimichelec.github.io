<!DOCTYPE html>
<html>
<link href="/stylesheets/main.css" rel="stylesheet">

<iframe id='image_frame'></iframe>
<<<<<<< HEAD
<iframe id='odds' class='odds_frame'></iframe>
<div id='player' class='player_div'></div>
<div id='curtain' class='curtain_div'></div>
<div id='playerMaskTop' class='playerMaskTop_div'></div>
<div id='playerMaskBottom' class='playerMaskBottom_div'></div>
<div id='playerImage' class='playerImage_div'></div>

=======
<iframe id='insert_0' class='insert_frame'></iframe>
<iframe id='insert_1' class='insert_frame'></iframe>
<div id='ytplayer' class='ytplayer_div'></div>
>>>>>>> refs/remotes/origin/master

<script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
<script src="/scripts/settings.js"></script>
<script>
"use strict";

// ------------------------------------------------------------------
// Settings Vars 
//

<<<<<<< HEAD
var hash = <%-JSON.stringify(hash)%>
var settings = <%-JSON.stringify(settings)%>
=======
// get new settings from server
function getSettings() {
	$.get('/getSettings', function(res) {
		hash = res['hash'];
		settings = res['settings'];
	});
}

function onPlayerReady(event) {
	event.target.playVideo();
	event.target.mute();
}
>>>>>>> refs/remotes/origin/master


// ------------------------------------------------------------------
// YouTube Player 
//
var tag = document.createElement('script');
tag.src = "https://www.youtube.com/iframe_api";
var firstScriptTag = document.getElementsByTagName('script')[0];
firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

<<<<<<< HEAD
var player;
function onYouTubeIframeAPIReady() {
	player = new YT.Player('player', {
	  playerVars: {
		'autoplay': 1,
		'controls': 0,
		'modestbranding':1
      },
=======
var ytplayer;
function onYouTubeIframeAPIReady() {
	ytplayer = new YT.Player('ytplayer', {
	  //height: '390',
	  //width: '640',
	  //muted: true,
	  //videoId: 'M7lc1UVf-VE',
>>>>>>> refs/remotes/origin/master
	  events: {
		'onReady': onPlayerReady,
		'onStateChange': onPlayerStateChange
	  }
	});
}

var player_latch = false;	// use a latch to deal with bouncing ENDED state changes

// this is only triggered on initializing the player
function onPlayerReady(event) {
	event.target.mute();
	rotateInserts();
}

// we're using this event to transition to a video, or rotate when a video completes
function onPlayerStateChange(event) {
	if(event.data == YT.PlayerState.ENDED) {
		if(player_latch) {
			player_latch = false;
			if(showing_insert.hangtime === undefined) {
				rotateInserts();
			} else {
				setTimeout(rotateInserts(), showing_insert.hangtime*1000);
			}
		}
	}
	if(event.data == YT.PlayerState.PLAYING) {
		showPlayer();
		player_latch = true;
	}
}


// ------------------------------------------------------------------
// Insert Control Functions

function showOdds() {
	$('#player').css('zIndex',-1);
	$('#odds').css('zIndex',0);
	$('#playerImage').hide();
	$('#playerMaskTop').hide();
	$('#playerMaskBottom').hide();
	$('#curtain').fadeOut(settings.fade_in_time);
}

function showPlayer() {
	$('#odds').css('zIndex',-1);
	$('#player').css('zIndex',0);
	$('#playerImage').hide();
	$('#playerMaskTop').show();
	$('#playerMaskBottom').show();
	$('#curtain').fadeOut(settings.fade_in_time);
	
	// if there's an image member included with this ad,
	// this will ease-in the video's ad freeze frame 2 seconds
	// before the end of the clip
	if(showing_insert.image !== undefined) {
		setTimeout(
			function() {
				$('#playerImage').css(
					'background-image',
					'url(images/' + showing_insert.image + ')'
				);
				$('#playerImage').fadeIn(100);
			},
			(showing_insert.endtime - showing_insert.starttime - 2) * 1000
		);
	}
}


// flip precached insert to top and start loading next insert on back frame
function rotateInserts() {
<<<<<<< HEAD
	$("#curtain").fadeIn(settings.fade_out_time, function() {
	
		showing_insert = getNextInsert();
		if(showing_insert.type == "YouTube") {
			player.loadVideoById(
				{'videoId': showing_insert.url,
				 'startSeconds': showing_insert.starttime,
				 'endSeconds': showing_insert.endtime
			});
		} else {
			$("#odds").attr('src', showing_insert.url);
		}

	});
=======
	ytplayer.stopVideo();
	showing_insert = next_insert;
	next_insert = getNextInsert();
	if (showing_insert.type == 'YouTube') {
		eytplayer.style.zIndex = 0;
		ytplayer.loadVideoById(showing_insert.url);
		
		insert_0.style.zIndex = -1;
		insert_1.style.zIndex = -1;
		if (next_insert.type != 'YouTube') {
			if (insert_cache_toggle) {
				insert_0.src = next_insert.url;
			} else {
				insert_1.src = next_insert.url;
			}
			insert_cache_toggle = !insert_cache_toggle;
		}
	} else {
		if (insert_cache_toggle) {
			insert_1.style.zIndex = 0;
			insert_0.style.zIndex = -1;
		} else {
			insert_0.style.zIndex = 0;
			insert_1.style.zIndex = -1;
		}
		if (next_insert.type != 'YouTube') {
			if (insert_cache_toggle) {
				insert_0.src = next_insert.url;
			} else {
				insert_1.src = next_insert.url;
			}
			insert_cache_toggle = !insert_cache_toggle;
		}
	}
	
	setTimeout(rotateInserts, showing_insert.time*1000);
>>>>>>> refs/remotes/origin/master
}

function getNextInsert() {
	if (odds_count++ < odds_count_setting) {
		return getNextOdds();
	}
	odds_count = 0;
	return getNextAd();
}


// ------------------------------------------------------------------
// Odds Functions

// get current odds board URL based on the odds_rotation_index
function getNextOdds() {
	var url = settings.main_odds_url + settings.sports.find(
		sport => sport.name === settings.odds_rotation[odds_rotation_index].name
	).url;
	var time = settings.odds_rotation[odds_rotation_index].time;
	if(time == null) time = settings.odds_rotation_time_default;
	incOddsRotation();
	return { url: url, time: time, type: 'odds' };
}

// increment odds boards counter to next board in rotation
function incOddsRotation() {
	odds_rotation_index++;
	if (odds_rotation_index >= settings.odds_rotation.length) {
		odds_rotation_index = 0;
	}
}


// ------------------------------------------------------------------
// Ads Functions

// get current ad URL based on the ads_rotation_index
function getNextAd() {
	var ad = settings.ads.find(
		ad => ad.name === settings.ads_rotation[ads_rotation_index].name
	);

	// increment ads counter to next ad in rotation
	ads_rotation_index++;
	if (ads_rotation_index >= settings.ads_rotation.length) {
		ads_rotation_index = 0;
	}

	return {
		type: ad.type,
		url: ad.url,
		starttime: ad.starttime,
		endtime: ad.endtime,
		image: ad.image,
		hangtime: ad.hangtime
	};
}


// ------------------------------------------------------------------
// Start of Execution

// setup iframe stack
var insert_cache_toggle = true;
var odds_rotation_index = 0;
var ads_rotation_index = 0;
var odds_count_setting = 2;
var odds_count = 0;

var player_buffer = true;
var odds_buffer = true;

var showing_insert;
<<<<<<< HEAD

// catch the load event of the odds display and carry-out the transition
$("#odds").on('load', function() {
	// wait a second after load is complete for odds board to settle
	setTimeout(function() {
		showOdds();
		setTimeout(rotateInserts, showing_insert.time*1000);
	}, 1000); 
});
=======
var next_insert;

var insert_0 = document.getElementById('insert_0');
var insert_1 = document.getElementById('insert_1');
var eytplayer = document.getElementById('ytplayer');

insert_0.style.zIndex  = -1;
insert_1.style.zIndex  = -1;
eytplayer.style.zIndex = -1;

// load up first 2 inserts
showing_insert = getNextInsert();
if (showing_insert.type == 'YouTube') {
	ytplayer.loadVideoById(showing_insert.url);
	eytplayer.style.zIndex = 0;
	next_insert = getNextInsert();
	if (next_insert.type != 'YouTube') {
		insert_0.src = next_insert.url;
	}
} else {
	insert_0.src = showing_insert.url;
	insert_0.style.zIndex  = 0;
	next_insert = getNextInsert();
	if (next_insert.type != 'YouTube') {
		insert_1.src = next_insert.url;
	}
}

>>>>>>> refs/remotes/origin/master

// start rotation and start periodically checking for settings updates
setTimeout(checkSettings, settings.settings_check_time*1000);

</script>
</html>
