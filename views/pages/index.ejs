<!DOCTYPE html>
<html>

<style>
#image_frame {
	border-width: 0;
	position:absolute;
	top:0; left:0;
	height:1200px; width:1600px;
	background-image: url('assets/images/rotator-frame.png');
	z-index: 999;
}
.insert_frame {
	border-width: 0;
	position:absolute;
	top:40px; left:40px;
	height:1120px; width:1520px;
	background-color:black;
}
</style>

<iframe id='image_frame'></iframe>
<iframe id='insert_0' class='insert_frame'></iframe>
<iframe id='insert_1' class='insert_frame'></iframe>
<iframe id='YTplayer_0' class='YTplayer_frame'></iframe>
<iframe id='YTplayer_1' class='YTplayer_frame'></iframe>

<script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
<script src="https://player.vimeo.com/api/player.js"></script>
<script>

// ------------------------------------------------------------------
// Settings Functions

// check for a settings update, if there is one, get new settings
function checkSettings() {
	$.get('/getSettingsHash', function(res) {
		if(res['hash'] != hash) getSettings();
	});
	setTimeout(checkSettings, settings.settings_check_time*1000);
}

// get new settings from server
function getSettings() {
	$.get('/getSettings', function(res) {
		hash = res['hash'];
		settings = res['settings'];
	});
}


function onPlayerReady() {}
function onPlayerStateChange() {}

var tag = document.createElement('script');

tag.src = "https://www.youtube.com/iframe_api";
var firstScriptTag = document.getElementsByTagName('script')[0];
firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

var YTplayer_0;
var YTplayer_1;
function onYouTubeIframeAPIReady() {
	YTplayer_0 = new YT.Player('YTplayer_0', {
	  height: '390',
	  width: '640',
	  videoId: '',
	  events: {
		'onReady': onPlayerReady,
		'onStateChange': onPlayerStateChange
	  }
	});
	
	YTplayer_1 = new YT.Player('YTplayer_1', {
	  height: '390',
	  width: '640',
	  videoId: '',
	  events: {
		'onReady': onPlayerReady,
		'onStateChange': onPlayerStateChange
	  }
	});
}


// ------------------------------------------------------------------
// Insert Control Functions

// flip precached insert to top and start loading next insert on back frame
function rotateInserts() {
	showing_insert = next_insert;
	next_insert = getNextInsert();
	if (insert_cache_toggle) {
		if (showing_insert.type == 'YouTube') {
			elYTplayer_1.style.zIndex = 0;
			elYTplayer_1.playVideo();
		} else {
			insert_1.style.zIndex = 0;
		}
		elYTplayer_0.style.zIndex = -1;
		insert_0.style.zIndex = -1;
		if (next_insert.type == 'YouTube') {
			elYTplayer_0.videoId = next_insert.url;
		} else {
			insert_0.src = next_insert.url;
		}
	} else {

		if (showing_insert.type == 'YouTube') {
			elYTplayer_0.style.zIndex = 0;
			elYTplayer_0.playVideo();
		} else {
			insert_0.style.zIndex = 0;
		}
		elYTplayer_1.style.zIndex = -1;
		insert_1.style.zIndex = -1;
		if (next_insert.type == 'YouTube') {
			elYTplayer_1.videoId = next_insert.url;
		} else {
			insert_1.src = next_insert.url;
		}
	}
	insert_cache_toggle = !insert_cache_toggle;
	setTimeout(rotateInserts, showing_insert.time*1000);
}

function getNextInsert() {
	if (odds_count++ < odds_count_setting) {
		return getNextOdds();
	}
	odds_count = 0;
	return getAdsUrlTime();
}


// ------------------------------------------------------------------
// Odds Functions

// get current odds board URL based on the odds_rotation_index
function getNextOdds() {
	url = settings.main_odds_url + settings.sports.find(
		sport => sport.name === settings.odds_rotation[odds_rotation_index].name
	).url;
	time = settings.odds_rotation[odds_rotation_index].time;
	incOddsRotation();
	return { url: url, time: time, type: 'odds' };
}

// increment odds boards counter to next board in rotation
function incOddsRotation() {
	odds_rotation_index++;
	if (odds_rotation_index >= settings.odds_rotation.length) {
		odds_rotation_index = 0;
	}
}


// ------------------------------------------------------------------
// Ads Functions

// get current ad URL based on the ads_rotation_index
function getAdsUrlTime() {
	url = settings.ads.find(
		ad => ad.name === settings.ads_rotation[ads_rotation_index].name
	).url;
	time = settings.ads_rotation[ads_rotation_index].time;
	incAdsRotation();
	return { url: url, time: time, type: 'video' };
}

// increment ads counter to next ad in rotation
function incAdsRotation() {
	ads_rotation_index++;
	if (ads_rotation_index >= settings.ads_rotation.length) {
		ads_rotation_index = 0;
	}
}


// ------------------------------------------------------------------
// Start of Execution

// process settings
var hash = <%-JSON.stringify(hash)%>
var settings = <%-JSON.stringify(settings)%>

// setup iframe stack
var insert_cache_toggle = true;
var odds_rotation_index = 0;
var ads_rotation_index = 0;
var odds_count_setting = 2;
var odds_count = 0;
var showing_insert;
var next_insert;

var insert_0 = document.getElementById('insert_0');
var insert_1 = document.getElementById('insert_1');
var elYTplayer_0 = document.getElementById('YTplayer_0');
var elYTplayer_1 = document.getElementById('YTplayer_1');

insert_0.style.zIndex =  0; // middle (just under image_frame)
insert_1.style.zIndex = -1; // back (odds board staging)

// load up first 2 inserts
showing_insert = getNextInsert();
insert_0.src = showing_insert.url;

next_insert = getNextInsert();
insert_1.src = next_insert.url;

// start rotation and start periodically checking for settings updates
setTimeout(rotateInserts, showing_insert.time*1000);
setTimeout(checkSettings, settings.settings_check_time*1000);

</script>
</html>
